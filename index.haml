!!!
%html{ :xmlns => "http://www.w3.org/1999/xhtml", :'xml:lang' => "en", :lang => "en" }
  %head
    %meta{ :'http-equiv' => "Content-type", :content => "text/html; charset=utf-8" }
    %link{ :rel => 'stylesheet', :href => 'basic.css', :type => 'text/css' }
    %link{ :rel => 'stylesheet', :href => 'specific.css', :type => 'text/css' }
    %link{ :rel => 'stylesheet', :href => 'grid.css', :type => 'text/css' }
    %title Picky, the small text search engine in Ruby.
  %body
    .header
    .picky{ :title => 'Snapshot of Picky, indexing data.' }
    .container_2
      .grid_2
        %h1 Picky
        %h2 The combinatorial small-text search engine in Ruby.
      .grid_1
        %h2 Overview
        %h3 What it is not
        %p A full-text search engine. If you need that, look at
        %a{ :href => 'http://sphinxsearch.com/' } Sphinx
        or
        %a{ :href => 'http://lucene.apache.org/solr/' } Solr (Lucene)
        \. They will help.
        %h3 What it is
        %p A small-text search engine (web) service.
        %h3 Huh?
        %p A small-text search engine does not operate on huge blobs of text, but instead on smaller, highly categorized text amounts. For example, on varchar database fields.
        %h3 Why?
        %p
          Picky helps your user find data which in a full-text search engine would be buried in a heap of results. Also, it lets him do so with a Google-y single search field.
        %p
          Sure the word "peter" is found most often in document #7, but he actually just wants documents by someone with surname "Peter", and not everything related to peters.
        %p
          Picky helps him refine his search by way of a comfortable interface to get exactly what he wants.
        %h3 How it works
        %p Hoo boy.
        %h3 See me show (it) off
        %p
          Using a real
          %a{ :href => 'http://twixtel.ch' } telephone search
          as an example.
        %iframe{ :src => "http://player.vimeo.com/video/12614970", :width => "480", :height => "375", :frameborder => "0" }
        %p
          This was at the fantastic
          %a{ :href => 'http://euruko2010.org/' } EuRuKo 2010
          Conference.
        %h3 How it performs
        %p
          This depends on many factors, but generally we recommend using Picky with a maximum of 120 million data points (we used it there). The area under 20 millions is probably best, indexing-performance wise. Your mileage may vary, of course.
        %h3 Why the octopus?
        %p
          Glad you asked. But first, read this
          %a{ :href => 'http://en.wikipedia.org/wiki/Octopus' } Wikipedia entry about octopuses
          \. Finished? Well, I think that sums it up pretty well. And it's cuuuute, don't you think? :)
        %p
          But don't call him that. He likes to be called "Octor the Destroyer".
        %h3 Feedback?
        %p Bring it.
        %code
          %pre florian • hanke / gmail • com
      .grid_1
        %h2 Try it now!
        %h3 Installation
        %code
          %pre
            gem install picky
          %pre
            :preserve
              # Generates the search engine in ./app_name with
              # lots of commented code to help you get going.
              #
              picky project app_name
          %pre
            :preserve
              cd app_name
              bundle install
        %h3 Adapt the generated code!
        %h4 Define indexes
        %p It's easy.
        %code
          %pre
            :preserve
              # In app/application.rb, find this stub
              # and adapt the examples.
              #
              indexes do
                ...
              end
        %h4 Define queries.
        %p After having defined indexes, this is a piece of cake.
        %p
          How is a query split into tokens? To which query is an url routed? What query uses which indexes?
        %code
          %pre
            :preserve
              # In application.rb, find this stub
              # and adapt the examples.
              #
              queries do
                ...
              end
        %h3 Indexing
        %p Let picky have a look at the data!
        %code
          %pre
            rake index
        %h3 Start the engines, gentlemen
        %code
          %pre
            rake start
        %h3 Try your first query
        %code
          %pre
            :preserve
              # Assuming this url is defined in application.rb.
              #
              curl localhost:6000/books/live?query=test
        %h3 Something not indexed as it should?
        %code
          %pre
            :preserve
              rake try:both[MyWordThatDoesNotWork]
        %p
          Words to find should be indexed in basically the same way as the query processes them.
        %h3 Refine!
        %p Define similarity searches, more specific indexes, more searches, etc.
        %h3 Need help?
        %p Right here. I'm happy to help!
        %code
          %pre florian • hanke / gmail • com
      .grid_2
        .decoration
    .footer