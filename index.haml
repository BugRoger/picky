!!!
%html{ :xmlns => "http://www.w3.org/1999/xhtml", :'xml:lang' => "en", :lang => "en" }
  %head
    %meta{ :'http-equiv' => "Content-type", :content => "text/html; charset=utf-8" }
    %link{ :rel => 'stylesheet', :href => 'basic.css', :type => 'text/css' }
    %link{ :rel => 'stylesheet', :href => 'grid.css', :type => 'text/css' }
    %title Picky, the small text search engine in Ruby.
  %body
    %ol.nav
      %li
        %a{ :href => 'http://floere.github.com/' } home
        â€¢
      %li
        %a{ :href => 'http://floere.github.com/picky' } picky home
    %h1 Picky
    .container_2
      .grid_2
        %p The combinatorial small-text search engine in Ruby.
      .grid_1
        %h2 What it is not
        %p A full-text search engine. If you need that, look at
        %a{ :href => 'http://sphinxsearch.com/' } Sphinx
        or
        %a{ :href => 'http://lucene.apache.org/solr/' } Solr (Lucene)
        \.
        %h2 What it is
        %p A small-text search engine.
        %h2 Huh?
        %p A small-text search engine does not operate on huge blobs of text, but instead on clearly defined fields.
        %p For example:
        %h2 How it works
        %p Hoo boy.
        %h2 See me show it off
        %iframe{ :src => "http://player.vimeo.com/video/12614970", :width => "500", :height => "375", :frameborder => "0" }
        %h2 How does it perform
        %p
          This depends on many factors, but generally we recommend using Picky with maximally 120 million data points. The area around 20 millions is probably optimal. 
      .grid_1
        %h2 Try it now!
        %code
          %pre
            gem install picky
          %pre
            :preserve
              # Generates the search engine in ./app
              # including lots of commented code to use.
              picky generate app
          %pre
            :preserve
              # If you intend to use Unicorn
              gem install unicorn
        %h2 Adapt the generated code
        %h3 Define some indexes!
        %code
          In application.rb:
          %br/
          %pre
            :preserve
              indexes do
                ...
              end
        %h3 Index!
        %code
          %pre
            rake index
        %h3 Let's go!
        %code
          %pre
            :preserve
              rake start
              # Quick query for the word test.
              curl localhost:6000/live?query=test