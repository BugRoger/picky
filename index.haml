!!!
%html{ :xmlns => "http://www.w3.org/1999/xhtml", :'xml:lang' => "en", :lang => "en" }
  %head
    %meta{ :'http-equiv' => "Content-type", :content => "text/html; charset=utf-8" }
    %link{ :rel => 'stylesheet', :href => 'basic.css', :type => 'text/css' }
    %link{ :rel => 'stylesheet', :href => 'grid.css', :type => 'text/css' }
    %title Picky, the small text search engine in Ruby.
  %body
    .header
    .picky
    .container_2
      .grid_2
        %h1 Picky
        %h2 The combinatorial small-text search engine in Ruby.
      .grid_1
        %h2 What it is not
        %p A full-text search engine. If you need that, look at
        %a{ :href => 'http://sphinxsearch.com/' } Sphinx
        or
        %a{ :href => 'http://lucene.apache.org/solr/' } Solr (Lucene)
        \. They will help.
        %h2 What it is
        %p A small-text search engine.
        %h2 Huh?
        %p A small-text search engine does not operate on huge blobs of text, but instead on clearly defined fields.
        %p For example:
        %h2 How it works
        %p Hoo boy.
        %h2 See me show (it) off
        %p
          Using a real
          %a{ :href => 'http://twixtel.ch' } telephone search
          as an example.
        %iframe{ :src => "http://player.vimeo.com/video/12614970", :width => "480", :height => "375", :frameborder => "0" }
        %p
          This was at the fantastic
          %a{ :href => 'http://euruko2010.org/' } EuRuKo 2010
          Conference.
        %h2 How it performs
        %p
          This depends on many factors, but generally we recommend using Picky with maximally 120 million data points. The area around 20 millions is probably optimal. Your mileage may vary, of course.
        %h2 Why the octopus?
        %p
          Glad you asked. But first, read this
          %a{ :href => 'http://en.wikipedia.org/wiki/Octopus' } Wiki entry about octopuses
          \. Finished? Well, I think that sums it up pretty well. And it's cuuuute, don't you think? :)
      .grid_1
        %h2 Try it now!
        %code
          %pre
            gem install picky
          %pre
            :preserve
              # Generates the search engine in ./app
              # including lots of commented code to use.
              #
              picky generate app
          %pre
            :preserve
              # If you intend to use Unicorn
              #
              gem install unicorn
        %h2 Adapt the generated code!
        %h3 Define some indexes
        %p It's easy.
        %code
          %pre
            :preserve
              # In application.rb (The examples will help)
              #
              indexes do
                title  = field(
                  :title,
                  :similarity => Similarity::DoubleLevenshtone.new(3),
                  :qualifiers => [:t, :title, :titre]
                )
                author = field :author,
                               :qualifiers => [:a, :author, :auteur]
                year   = field :year,
                               :partial => Cacher::Partial::None.new,
                               :qualifiers => [:y, :year, :annee]

                type :main,
                     "SELECT title, author, year FROM books",
                     title_with_similarity,
                     author_with_similarity,
                     year,
                     :heuristics => Query::Heuristics.new(
                       [:title, :author] => 5, [:author, :year] => 2
                     )
              end
        %h3 Show Picky the way to the database
        %code
          %pre
            :preserve
              # In application.rb (The examples will help)
              #
              db do
                ...
              end
        %h3 Indexing
        %code
          %pre
            rake index
        %h3 Start the engines
        %code
          %pre
            rake start
        %h3 Try your first query
        %code
          %pre
            :preserve
              # Quick query for the word test.
              #
              curl localhost:6000/live?query=test