---
title: The Ruby small text search engine.
layout: default
---

.container_2
  %h2 The Ruby small text search engine.
  .grid_1
    %h2 What's that?
    %p
      Picky is a really
      %i easy to use
      and
      %i fast
      Ruby search engine that helps your users
      %i find what they are looking for.
    %h3 Try…
    %p
      A very
      %a{ :href => 'http://picky-simple-example.heroku.com/' } simple example
      with books (using 2 heroku servers).
    %p
      A more
      %a{ :href => 'http://www.twixtel.com/' } complicated example
      with a telephone search.
    %h3 What it is
    %p A small-text search engine (web) service.
    %h3 What it is not
    %p
      A full-text search engine. If you need that, look at
      %a{ :href => 'http://sphinxsearch.com/' } Sphinx
      or
      = succeed('.') do
        %a{ :href => 'http://lucene.apache.org/solr/' } Solr (Lucene)
      They will help.
    %h3 Huh? What's a small-text search engine?
    %p
      A small-text search engine does not operate on huge blobs of text, but instead on smaller, highly categorized text amounts. For example, on varchar database fields.
    %p
      If your data isn't categorized well (like text from a book), then you should instead choose one of the above full-text search engines.
    %h3 Then why use it?
    %p
      Picky helps your user find data which in a full-text search engine would be buried in a heap of results. Also, it lets him do so with a Google-y single search field.
    %p
      Sure the word "peter" is found most often in document #7, but he actually just wants documents by someone with surname "Peter", and not everything related to peters.
    %p
      Picky helps him refine his search by way of a comfortable interface to get exactly what he wants.
    %h3 But why not just use a full-text search engine?
    %p
      Full-Text search engines do one thing especially well: Making full (i.e. uncategorized heaps of) text searchable.
    %p
      For small, highly categorized text, we simply need new ideas. Picky is one of them.
    %p
      Ok, that was my elevator pitch ;)
    %h3 How it works
    %p Hoo boy.
    %h3 See me show (it) off
    %p
      Using a real
      %a{ :href => 'http://twixtel.ch' } telephone search
      as an example.
    %iframe{ :src => "http://player.vimeo.com/video/12614970", :width => "460", :height => "365", :frameborder => "0" }
    %p
      This was at the fantastic
      %a{ :href => 'http://euruko2010.org/' } EuRuKo 2010
      Conference in
      %a{ :href => 'http://www.google.ch/images?q=krakow+poland' } beautiful
      Krakow.
    %h3 Why would one write a search engine in Ruby?
    %p
      It's fast enough and the high level really helped understanding it as it evolved. There are some parts that have been written in pedal-to-the-metal C code.
    %h3 How does it perform?
    %p
      This depends on many factors, but generally we recommend using Picky with a maximum of 120 million data points (we used it there).
      The area under 20 millions is probably best. Your mileage may vary, of course, depending on how many partial indexes you use etc.
    %p
      Indexing is not too fast, and I'd be glad if it were faster. However, you get the full power of Ruby and fully customizable indexing.
    %h3 Where it is
    %p
      Picky lives in a little cave called
      %a{ :href => 'http://github.com/floere/picky' } The Github Repo
      \. He usually pays his rent on time.
    %h3 Why the octopus?
    %p
      Glad you asked. But first, read this
      = succeed('.') do
        %a{ :href => 'http://en.wikipedia.org/wiki/Octopus' } Wikipedia entry about octopuses
      Also,
      = succeed('.') do
        %a{ :href => 'http://www.youtube.com/watch?v=badHUNl2HXU' } a movie
      Finished? I think that sums it up pretty well. And it's cuuute, don't you think? :)
    %p
      But don't call him that. He likes to be called "Octor the Destroyer".
    %h3 Why the LGPL license?
    %p
      My former employer and I met halfway, so to speak. I'd have preferred a MIT license.
    %h3 Examples in the wild
    %p
      %a{ :href => 'http://www.twixtel.ch' } TwixTel
      Telephone Book Search Engine
    %h3 Feedback?
    %p Glad to hear it!
    %p
      = succeed(', ') do
        %a{ :href => 'http://github.com/inbox/new/floere' } github (floere)
      = succeed(', ') do
        %a{ :href => 'http://twitter.com/hanke' } twitter (hanke)
      %a{ :href => 'mailto:florian.hanke@gmail.com' } mail (gmail)
    %h2 Roadmap
    %p
      %a{ :href => 'http://github.com/floere/picky/wiki/Roadmap' } Wiki Roadmap
  .grid_1
    %h2 Getting started
    %p This takes about 5 minutes. After that, you'll have a running Picky server and a web frontend to play with.
    %h3 Overview
    %p Before we start, the big picture:
    %img{ :src => 'diagrams/basic-overview.png', :width => '480px' }
    %p
      That's the basic setup. The things to remember are:
      %ul
        %li The Picky server calculates IDs for a query.
        %li Your app server renders results for the IDs.
    %p
      Together they are like a small A-Team, something like "Action Search Squad Alpha"! «We've got the results and are heading back to base now, Sir!» Bam!
    %p
      Note that you don't need a Picky client. You could just as well use the results in your Python/Java/PHP app server (If you happen to write a client for one of these, please let me know).
    %h3 Installation
    %p
      Note that Picky only runs on Ruby 1.9. I recommend
      %a{ :href => 'http://rvm.beginrescueend.com/' } RVM
      for installing and managing Ruby versions.
    %code
      %pre
        gem install picky picky-client
    %h3 The server
    %p The server generates a library example, which you can run right away.
    %code
      %pre
        :preserve
          # Generates a directory "app_name"
          # with a new Picky project.
          
          picky project app_name
      %pre
        :preserve
          cd app_name
          bundle install
    %h4 Index the data
    %code
      %pre
        rake index
    %h4 Start the Picky server
    %code
      %pre
        rake start
    %h4 Try a query!
    %code
      %pre
        curl localhost:8080/books/full?query=test
    %p
      Don't worry about the strange looking results!
      The next part (client) will take care of them.
    %p
      If you're interested anyway:
      %a{ :href => 'http://github.com/floere/picky/wiki/results-format-and-structure' } Results (Format & Structure)
    %h3 The client
    %p The client generates an example app for the "library" example backend, using Sinatra.
    %code
    %pre
      :preserve
        # Generates a directory "app_name"
        # with a new Picky Client Webapp project.
        
        picky-client sinatra app_name
    %pre
      :preserve
        cd app_name
        bundle install
    %h4 Start the app server
    %code
      %pre
        unicorn -p 3000
    %h4 Admire your work
    %p
      Go to
      %a{ :href => 'http://localhost:3000/' } http://localhost:3000/
      and try the examples.
    %h3 Your own search
    %p
      You're probably itching to change the example for
      your own data. How do you do this?
    %h4 The server
    %p In the server directory, just type
    %code
      %pre
        rake
    %p and it will tell you where to change the server configuration.
    %h4 The client
    %p
      Go to
      %a{ :href => 'http://localhost:3000/configure' } http://localhost:3000/configure
      and the page will show you how to configure your app server.
    %h3 Need help?
    %p
      Right here. I'm happy to help!
      If something doesn't work, send/gist me your application.rb
      and I'll look into it.
    %p
      = succeed(', ') do
        %a{ :href => 'http://github.com/inbox/new/floere' } github (floere)
      = succeed(', ') do
        %a{ :href => 'http://twitter.com/hanke' } twitter (hanke)
      %a{ :href => 'mailto:florian.hanke@gmail.com' } mail (gmail)
    %p
      There's a Wiki as well:
      %a{ :href => 'http://github.com/floere/picky/wiki' } Picky Wiki