var search_data = {"index":{"searchIndex":["hash","picky","client","convenience","helper","tasks","javascripts","allocations()","allocations_size()","cached_interface()","clear_ids()","default_configuration()","default_configuration()","default_params()","default_params()","defaultize()","empty?()","entries()","ids()","input()","interface()","new()","populate_with()","results()","search()","search_unparsed()","send_search()","to_query()","total()","picky-client.rb","client.rb","convenience.rb","helper.rb","tasks.rb","javascripts.rb","update.rake"],"longSearchIndex":["lib/picky-client/client.rb","lib/picky-client/tasks/javascripts.rb","picky","picky","picky","picky","picky::tasks","picky::convenience","picky::convenience","picky::helper","picky::convenience","picky::client","picky::client","picky::client","picky::client","picky::client","picky::convenience","picky::convenience","picky::convenience","picky::helper","picky::helper","picky::client","picky::convenience","picky::helper","picky::client","picky::client","picky::client","hash","picky::convenience","files/lib/picky-client_rb.html","files/lib/picky-client/client_rb.html","files/lib/picky-client/convenience_rb.html","files/lib/picky-client/helper_rb.html","files/lib/picky-client/tasks_rb.html","files/lib/picky-client/tasks/javascripts_rb.html","files/lib/picky-client/tasks/update_rake.html"],"info":[["Hash","lib/picky-client/client.rb","classes/Hash.html"," < Object","",1],["Picky","lib/picky-client/client.rb","classes/Picky.html"," < ","",1],["Client","Picky","classes/Picky/Client.html"," < Object","",1],["Convenience","Picky","classes/Picky/Convenience.html"," < ","Use this class to extend the hash that the client returns. ",1],["Helper","Picky","classes/Picky/Helper.html"," < Object","This class provides a few view helpers. ",1],["Tasks","Picky","classes/Picky/Tasks.html"," < ","Rake tasks for Picky clients. ",1],["Javascripts","Picky::Tasks","classes/Picky/Tasks/Javascripts.html"," < Object","Copies the latest javascripts into the default javascript folder. Example: # Use as follows in your Rakefile.",1],["allocations","Picky::Convenience","classes/Picky/Convenience.html#M000013","()","Returns the allocations. ",2],["allocations_size","Picky::Convenience","classes/Picky/Convenience.html#M000014","()","Returns the number of allocations. ",2],["cached_interface","Picky::Helper","classes/Picky/Helper.html#M000022","(options = {})","Returns a cached version if you always use a single language. ",2],["clear_ids","Picky::Convenience","classes/Picky/Convenience.html#M000012","()","Removes all ids of each allocation. ",2],["default_configuration","Picky::Client","classes/Picky/Client.html#M000001","()","",2],["default_configuration","Picky::Client","classes/Picky/Client.html#M000002","(options = {})","",2],["default_params","Picky::Client","classes/Picky/Client.html#M000003","()","",2],["default_params","Picky::Client","classes/Picky/Client.html#M000004","(options = {})","",2],["defaultize","Picky::Client","classes/Picky/Client.html#M000005","(params = {})","Merges the given params, overriding the defaults. ",2],["empty?","Picky::Convenience","classes/Picky/Convenience.html#M000010","()","Are there any allocations? ",2],["entries","Picky::Convenience","classes/Picky/Convenience.html#M000017","(limit = 20)","Returns either * the rendered entries, if you have used #populate_with _with_ a block OR * the model",2],["ids","Picky::Convenience","classes/Picky/Convenience.html#M000011","(limit = 20)","Returns the topmost n results. (Note that not all ids are returned with the results. By default only",2],["input","Picky::Helper","classes/Picky/Helper.html#M000020","(options = {})","",2],["interface","Picky::Helper","classes/Picky/Helper.html#M000019","(options = {})","Returns a standard search interface for easy starting. ... aka scaffolding ;) Options: * button: The",2],["new","Picky::Client","classes/Picky/Client.html#M000000","(options = {})","",2],["populate_with","Picky::Convenience","classes/Picky/Convenience.html#M000016","(model_class, amount = 20, options = {})","Populates the ids with (rendered) model instances. Give it an AR class and options for the find and it",2],["results","Picky::Helper","classes/Picky/Helper.html#M000021","(options = {})","",2],["search","Picky::Client","classes/Picky/Client.html#M000006","(query, params = {})","",2],["search_unparsed","Picky::Client","classes/Picky/Client.html#M000007","(query, params = {})","Use this method for live queries  they can pass the JSON string with the results through without parsing.",2],["send_search","Picky::Client","classes/Picky/Client.html#M000008","(params = {})","Sends a search to the configured address. Note: For live queries, parsing is actually not really necessary.",2],["to_query","Hash","classes/Hash.html#M000009","(namespace = nil)","",2],["total","Picky::Convenience","classes/Picky/Convenience.html#M000015","()","Returns the total of results. ",2],["picky-client.rb","files/lib/picky-client_rb.html","files/lib/picky-client_rb.html","","",3],["client.rb","files/lib/picky-client/client_rb.html","files/lib/picky-client/client_rb.html","","Ruby Search Client Frontend for the Picky search engine. === Usage ==== 1. Set up search clients. # Create",3],["convenience.rb","files/lib/picky-client/convenience_rb.html","files/lib/picky-client/convenience_rb.html","","",3],["helper.rb","files/lib/picky-client/helper_rb.html","files/lib/picky-client/helper_rb.html","","",3],["tasks.rb","files/lib/picky-client/tasks_rb.html","files/lib/picky-client/tasks_rb.html","","",3],["javascripts.rb","files/lib/picky-client/tasks/javascripts_rb.html","files/lib/picky-client/tasks/javascripts_rb.html","","",3],["update.rake","files/lib/picky-client/tasks/update_rake.html","files/lib/picky-client/tasks/update_rake.html","","desc \"Update the javascripts etc.\" task :update => [:javascripts]",3]]}}